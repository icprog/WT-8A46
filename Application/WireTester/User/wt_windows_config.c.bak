/*******************************************************************
*                                                                    *
*                SEGGER Microcontroller GmbH & Co. KG                *
*        Solutions for real time microcontroller applications        *
*                                                                    *
**********************************************************************
*                                                                    *
* C-file generated by:                                               *
*                                                                    *
*        GUI_Builder for emWin version 5.22                          *
*        Compiled Jul  4 2013, 15:16:01                              *
*        (c) 2013 Segger Microcontroller GmbH & Co. KG               *
*                                                                    *
**********************************************************************
*                                                                    *
*        Internet: www.segger.com  Support: support@segger.com       *
*                                                                    *
**********************************************************************
*/

// USER START (Optionally insert additional includes)
// USER END
#include "k_bsp.h" 
#include "DIALOG.h"
#include "k_storage.h"
#include "wt_task_gui.h"
#include "wt_bsp_key_led.h"
#include "k_rtc.h"
#include "wt_bsp_file.h"
#pragma diag_suppress 870 
/*********************************************************************
*
*       Defines
*
**********************************************************************
*/



// USER START (Optionally insert additional defines)
// USER END

extern GUI_CONST_STORAGE GUI_BITMAP bm_ICO_wheel;  //wujun added
extern void WT_TestFolder_Init(void);
extern uint8_t WT_Config_Read(void);
extern uint8_t WT_Config_Save(void);
extern uint8_t WT_Config_Restore(void);
extern WM_HWIN Create_PasswdDlgWindow(WM_HWIN hWin_para);
/*********************************************************************
*
*       Static data
*
**********************************************************************
*/

// USER START (Optionally insert additional static data)
static void Startup(WM_HWIN hWin, uint16_t xpos, uint16_t ypos);
void set_systemtime(uint8_t sec,uint8_t min, uint8_t hour, uint8_t day, uint8_t month,uint16_t year);
static void get_systemtime(uint8_t *sec,uint8_t *min, uint8_t *hour, uint8_t *day, uint8_t *month,uint16_t *year);

extern uint32_t wheel_value;
static uint32_t tmpwheel;
static WM_HWIN hDialog_comm;
static WM_HWIN hDialog_advance;
static WM_HWIN hDialog_system;
static WM_HWIN hDialog_time;
static int cursorindex=0;

static char input_char[10]={'0','1','2','3','4','5','6','7','8','9'};
static char passwd_char[65]={'1','2','3','4','5','6','7','8','9','0',
														'a','b','c','d','e','f','g','h','i','j',
														'k','l','m','n','o','p','q','r','s','t',
														'u','v','w','x','y','z','A','B','C','D',
														'E','F','G','H','I','J','K','L','M','N',
														'O','P','Q','R','S','T','U','V','W','X',
														'Y','Z','.','-','_'};

K_ModuleItem_Typedef  wt_setting =
{	
	5,
	"设置",
	&bm_ICO_wheel,	
	//&CreateSystemInfo,
	Startup,
	0,
};

//static SystemSettingsTypeDef settings;

#define ID_WINDOW_0        			(GUI_ID_USER + 0x02)
#define ID_IMAGE_INFO           (GUI_ID_USER + 0x03)
#define ID_MULTIPAGE            (GUI_ID_USER + 0x0A)
#define ID_IMAGE_LOGO           (GUI_ID_USER + 0x0B)  

#define ID_SLIDER_LIGHT    			(GUI_ID_USER + 0x0D)
#define ID_TEXT_LIGHT    				(GUI_ID_USER + 0x0E)
#define ID_TEXT_AUDIO    				(GUI_ID_USER + 0x0F)
#define ID_SLIDER_AUDIO    			(GUI_ID_USER + 0x12)
#define ID_BUTTON_OK    				(GUI_ID_USER + 0x16)
#define ID_TEXT_TUNNEL    			(GUI_ID_USER + 0x18)
#define ID_BUTTON_EXIT    			(GUI_ID_USER + 0x19)
#define ID_BUTTON_DEFAULT    		(GUI_ID_USER + 0x1A)
#define ID_EDIT_TUNNEL    			(GUI_ID_USER + 0x1B)
#define ID_TEXT_ADDRESS    			(GUI_ID_USER + 0x1C)
#define ID_EDIT_ADDRESS    			(GUI_ID_USER + 0x1D)
#define ID_TEXT_WTLIMIT    			(GUI_ID_USER + 0x1E)
#define ID_DROPDOWN_WTLIMIT    	(GUI_ID_USER + 0x1F)
//#define ID_DROPDOWN_ZLIMIT    	(GUI_ID_USER + 0x20)
//#define ID_TEXT_ZLIMIT    			(GUI_ID_USER + 0x21)

#define ID_TEXT_DATE           	(GUI_ID_USER + 0x22)
#define ID_TEXT_TIME           	(GUI_ID_USER + 0x23)
#define ID_TEXT_LANGUAGE        (GUI_ID_USER + 0x24)
#define ID_DROPDOWN_LANG        (GUI_ID_USER + 0x25)
#define ID_TEXT_MASTER          (GUI_ID_USER + 0x26)
#define ID_EDIT_MASTER          (GUI_ID_USER + 0x27)
#define ID_TEXT_CLIENT          (GUI_ID_USER + 0x28)
#define ID_EDIT_CLIENT          (GUI_ID_USER + 0x29)
#define ID_EDIT_DATE            (GUI_ID_USER + 0x2A)
#define ID_EDIT_TIME            (GUI_ID_USER + 0x2B)
#define ID_TEXT_DATEHELP        (GUI_ID_USER + 0x2C)
#define ID_TEXT_TIMEHELP        (GUI_ID_USER + 0x2D)
#define ID_TEXT_TESTMODE        (GUI_ID_USER + 0x2E)
#define ID_DROPDOWN_TESTMODE    (GUI_ID_USER + 0x2F)
#define ID_EDIT_YEAR            (GUI_ID_USER + 0x30)
#define ID_TEXT_YEAR            (GUI_ID_USER + 0x31)
#define ID_TEXT_MONTH           (GUI_ID_USER + 0x32)
#define ID_EDIT_MONTH           (GUI_ID_USER + 0x33)
#define ID_TEXT_DAY           	(GUI_ID_USER + 0x34)
#define ID_EDIT_DAY           	(GUI_ID_USER + 0x35)
#define ID_EDIT_HOUR            (GUI_ID_USER + 0x36)
#define ID_TEXT_HOUR            (GUI_ID_USER + 0x37)
#define ID_TEXT_MINUTE          (GUI_ID_USER + 0x38)
#define ID_EDIT_MINUTE          (GUI_ID_USER + 0x39)
#define ID_TEXT_SECOND          (GUI_ID_USER + 0x3A)
#define ID_EDIT_SECOND          (GUI_ID_USER + 0x3B)

#define ID_TEXT_AUDIOOK     		(GUI_ID_USER + 0x3C)
#define ID_TEXT_AUDIONG     		(GUI_ID_USER + 0x3D)
#define ID_DROPDOWN_AUDIOOK 	  (GUI_ID_USER + 0x3E)
#define ID_DROPDOWN_AUDIONG 	  (GUI_ID_USER + 0x3F)

#define ID_TEXT_STUDYMODE     	(GUI_ID_USER + 0x40)
#define ID_DROPDOWN_STUDYMODE 	(GUI_ID_USER + 0x41)

#define ID_TEXT_STUDYBOARD     	(GUI_ID_USER + 0x42)
#define ID_EDIT_STUDYBOARD 	    (GUI_ID_USER + 0x43)

#define ID_TEXT_PASSWD     			(GUI_ID_USER + 0x44)
#define ID_EDIT_PASSWD 	    		(GUI_ID_USER + 0x45)

#define ID_TEXT_TESTRULE     		(GUI_ID_USER + 0x46)
#define ID_DROPDOWN_TESTRULE 	  (GUI_ID_USER + 0x47)


/*********************************************************************
*
*       _aDialog
*
* Purpose
*   Dialog resource using a WINDOW widget
*/
static const GUI_WIDGET_CREATE_INFO _aDialog[] = 
{
  
  { WINDOW_CreateIndirect, "System", ID_WINDOW_0, 0, 0, 480, 222, 0, 0x0, 0 },
  { MULTIPAGE_CreateIndirect, "Multipage", ID_MULTIPAGE, 0, 0, 480, 190, 0, 0x0, 0 },  
	{ BUTTON_CreateIndirect, "<短按>保存", ID_BUTTON_OK, 100, 195, 80, 25, 0, 0x0, 0 },  
  { BUTTON_CreateIndirect, "<长按>默认值", ID_BUTTON_DEFAULT, 195, 195, 90, 25, 0, 0x0, 0 },
	{ BUTTON_CreateIndirect, "退出设置", ID_BUTTON_EXIT, 300, 195, 80, 25, 0, 0x0, 0 },
};


static const GUI_WIDGET_CREATE_INFO _aDialogCommunitSettings[] = {
  { WINDOW_CreateIndirect, "Communication Settings", 0, 0, 0, 480, 222, FRAMEWIN_CF_MOVEABLE },  
	{ TEXT_CreateIndirect, "主机地址(0~255)", ID_TEXT_MASTER, 20, 25, 120, 20, 0, 0x0, 0 },
  { EDIT_CreateIndirect, "Edit-master", ID_EDIT_MASTER, 145, 25, 80, 20, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "分机地址(0~65535)", ID_TEXT_CLIENT, 20, 60, 120, 20, 0, 0x0, 0 },
  { EDIT_CreateIndirect, "Edit-client", ID_EDIT_CLIENT, 145, 60, 80, 20, 0, 0x64, 0 }, 
  { TEXT_CreateIndirect, "无线通道(0~16)", ID_TEXT_TUNNEL, 20, 95, 120, 20, 0, 0x0, 0 },
  { EDIT_CreateIndirect, "Edit-tunnel", ID_EDIT_TUNNEL, 145, 95, 80, 20, 0, 0x64, 0 },
  { TEXT_CreateIndirect, "MAC地址(x:x:x:x:x)", ID_TEXT_ADDRESS, 20, 130, 130, 20, 0, 0x0, 0 },
  { EDIT_CreateIndirect, "Edit-address", ID_EDIT_ADDRESS, 145, 130, 80, 20, 0, 0x64, 0 },
 
};

static const GUI_WIDGET_CREATE_INFO _aDialogSystemSettings[] = {
  { WINDOW_CreateIndirect, "System Settings", 0, 0, 0, 480, 222, FRAMEWIN_CF_MOVEABLE },
	{ TEXT_CreateIndirect, "亮度", ID_TEXT_LIGHT, 20, 10, 40, 20, 0, 0x0, 0 },
	{ SLIDER_CreateIndirect, "Slider-light", ID_SLIDER_LIGHT, 80, 10, 130, 20, 0, 0x0, 0 },
	{ TEXT_CreateIndirect, "音量", ID_TEXT_AUDIO, 20, 50, 40, 20, 0, 0x0, 0 },
  { SLIDER_CreateIndirect, "Slider-audio", ID_SLIDER_AUDIO, 80, 50, 130, 20, 0, 0x0, 0 },
	{ TEXT_CreateIndirect, "声音(OK)", ID_TEXT_AUDIOOK, 20, 90, 60, 20, 0, 0x0, 0 },
  { DROPDOWN_CreateIndirect, "dropdown-audiook", ID_DROPDOWN_AUDIOOK, 80, 90, 80, 20, 0, 0x0, 0 },
	{ TEXT_CreateIndirect, "声音(NG)", ID_TEXT_AUDIONG, 20, 130, 60, 20, 0, 0x0, 0 },
  { DROPDOWN_CreateIndirect, "dropdown-audiong", ID_DROPDOWN_AUDIONG, 80, 130, 80, 20, 0, 0x0, 0 },
	{ TEXT_CreateIndirect, "语言", ID_TEXT_LANGUAGE, 240, 10, 40, 20, 0, 0x0, 0 },
	{ DROPDOWN_CreateIndirect, "dropdown-lang", ID_DROPDOWN_LANG, 280, 10, 80, 20, 0, 0x0, 0 },


};

static const GUI_WIDGET_CREATE_INFO _aDialogTimeSettings[] = {
  { WINDOW_CreateIndirect, "Time Settings", 0, 0, 0, 480, 222, FRAMEWIN_CF_MOVEABLE },
	{ TEXT_CreateIndirect, "当前日期", ID_TEXT_DATE, 20, 30, 60, 20, 0, 0x0, 0 },
	{ EDIT_CreateIndirect, "Edit-year", ID_EDIT_YEAR, 80, 30, 40, 20, 0, 0x64, 0 },
	{ TEXT_CreateIndirect, "年", ID_TEXT_YEAR, 123, 30, 20, 20, 0, 0x0, 0 },
	{ EDIT_CreateIndirect, "Edit-month", ID_EDIT_MONTH, 140, 30, 30, 20, 0, 0x64, 0 },
	{ TEXT_CreateIndirect, "月", ID_TEXT_MONTH, 173, 30, 20, 20, 0, 0x0, 0 },
	{ EDIT_CreateIndirect, "Edit-day", ID_EDIT_DAY, 190, 30, 30, 20, 0, 0x64, 0 },
	{ TEXT_CreateIndirect, "日", ID_TEXT_DAY, 223, 30, 20, 20, 0, 0x0, 0 },
	{ TEXT_CreateIndirect, "当前时间", ID_TEXT_TIME, 20, 75, 60, 20, 0, 0x0, 0 },
	{ EDIT_CreateIndirect, "Edit-hour", ID_EDIT_HOUR, 80, 75, 40, 20, 0, 0x64, 0 },
	{ TEXT_CreateIndirect, "时", ID_TEXT_HOUR, 123, 75, 20, 20, 0, 0x0, 0 },
	{ EDIT_CreateIndirect, "Edit-minute", ID_EDIT_MINUTE, 140, 75, 30, 20, 0, 0x64, 0 },
	{ TEXT_CreateIndirect, "分", ID_TEXT_MINUTE, 173, 75, 20, 20, 0, 0x0, 0 },
	{ EDIT_CreateIndirect, "Edit-second", ID_EDIT_SECOND, 190, 75, 30, 20, 0, 0x64, 0 },
	{ TEXT_CreateIndirect, "秒", ID_TEXT_SECOND, 223, 75, 20, 20, 0, 0x0, 0 },

};

static const GUI_WIDGET_CREATE_INFO _aDialogAdvanceSettings[] = {
  { WINDOW_CreateIndirect, "Advance Settings", 0, 0, 0, 480, 222, FRAMEWIN_CF_MOVEABLE },  
	{ TEXT_CreateIndirect, "测试模式", ID_TEXT_TESTMODE, 20, 30, 82, 20, 0, 0x0, 0 },
  { DROPDOWN_CreateIndirect, "TestMode", ID_DROPDOWN_TESTMODE, 100, 30, 80, 20, 0, 0x64, 0 }, 
	{ TEXT_CreateIndirect, "导通阈值", ID_TEXT_WTLIMIT, 20, 70, 80, 20, 0, 0x0, 0 },
  { DROPDOWN_CreateIndirect, "Edit-wtlimit", ID_DROPDOWN_WTLIMIT, 100, 70, 80, 20, 0, 0x64, 0 },
	{ TEXT_CreateIndirect, "自学习模式", ID_TEXT_STUDYMODE, 20, 110, 82, 20, 0, 0x0, 0 }, 
  { DROPDOWN_CreateIndirect, "Edit-studymode", ID_DROPDOWN_STUDYMODE, 100, 110, 80, 20, 0, 0x64, 0 },
	{ TEXT_CreateIndirect, "测试规则", ID_TEXT_TESTRULE, 240, 30, 80, 20, 0, 0x0, 0 },
  { DROPDOWN_CreateIndirect, "Edit-testrule", ID_DROPDOWN_TESTRULE, 280, 30, 80, 20, 0, 0x64, 0 },
	{ TEXT_CreateIndirect, "密码", ID_TEXT_PASSWD, 240, 70, 40, 20, 0, 0x0, 0 },
	{ EDIT_CreateIndirect, "dropdown-lang", ID_EDIT_PASSWD, 280, 70, 80, 20, 0, 0x0, 0 },
};



/**
  * @brief  callback for General Settings
  * @param  pMsg: Pointer to Date structure
  * @retval None
  */

static void _cbCommunitSettings(WM_MESSAGE * pMsg) {
  WM_HWIN hItem;
//  uint32_t tmp = 0;
//	uint32_t i=0;
	char mac[10];
	uint8_t tunnel_val=0;
	uint16_t master_val=0;
//	uint32_t client_val=0;
	int cursorpos=0;
	int index=0;
  
  hItem = pMsg->hWin;
	WINDOW_SetBkColor(hItem, 0x00FFFFFF);
	//WT_Config_Read();//读取配置参数
	
  switch (pMsg->MsgId) {   
  case WM_INIT_DIALOG:     
    // 主机地址
	  hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_MASTER);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
		TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
	
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_MASTER);
		EDIT_SetDecMode(hItem, 0, 0,255, 0, 0);
    EDIT_SetValue(hItem, WT_Config.Addr_Master);
		EDIT_EnableBlink(hItem, 600, 1);
    // 从机地址
	  hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_CLIENT);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
		TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
	
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_CLIENT);
		EDIT_SetDecMode(hItem, 0, 0,65535, 0, 0);
    EDIT_SetValue(hItem, WT_Config.Addr_Client);
		EDIT_EnableBlink(hItem, 600, 1);
		// 无线通道
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_TUNNEL);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
		TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_TUNNEL);
    //EDIT_SetText(hItem, "123");
		EDIT_SetDecMode(hItem, 0, 0,16, 0, 0);
    EDIT_SetValue(hItem,WT_Config.Channel);
		EDIT_EnableBlink(hItem, 600, 1);
	  // MAC地址
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_ADDRESS);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
		TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_ADDRESS);    
		EDIT_SetTextMode(hItem);
		sprintf(mac,"%d:%d:%d:%d:%d",WT_Config.Addr_MAC[0],WT_Config.Addr_MAC[1],WT_Config.Addr_MAC[2],WT_Config.Addr_MAC[3],WT_Config.Addr_MAC[4]);
		EDIT_SetText(hItem, mac);
		//strcpy(mac,(char *)WT_Config.Addr_MAC);
	//	memcpy(mac,(char *)WT_Config.Addr_MAC,5);
//		EDIT_SetText(hItem, mac);


    break;
	case	MY_MESSAGE_WHEEL://处理滚轮事件
		hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_MASTER);
		if(WM_HasFocus(hItem))//改变主机地址
		{
			master_val = EDIT_GetValue(hItem);
			if(KeyLed_State.wheel<0)
			{
				master_val=KeyLed_State.wheel+256;
			}
			else 
			{
				master_val=KeyLed_State.wheel;
			}
			EDIT_SetValue(hItem,master_val);
		}
		hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_CLIENT);
		if(WM_HasFocus(hItem))//改变从机地址
		{
//			if(KeyLed_State.wheel<0)
//			{
//				client_val=KeyLed_State.wheel+65536;
//			}
//			else 
//			{
//				client_val=KeyLed_State.wheel;
//			}
//			EDIT_SetValue(hItem,client_val);
			EDIT_SetCursorAtChar(hItem,cursorindex);
			index=KeyLed_State.wheel;

			if(KeyLed_State.wheel>=10 && KeyLed_State.wheel <20) index=KeyLed_State.wheel-10;
			if(KeyLed_State.wheel>=20 && KeyLed_State.wheel <30) index=KeyLed_State.wheel-20;
			if(KeyLed_State.wheel>=30) index=9;
			if(KeyLed_State.wheel<0 && KeyLed_State.wheel >= -10) index=KeyLed_State.wheel+10;
			if(KeyLed_State.wheel<-10 && KeyLed_State.wheel >= -20) index=KeyLed_State.wheel+20;
			if(KeyLed_State.wheel<-20) index=0;
			if(cursorindex==EDIT_GetCursorCharPos(hItem))
			{
				EDIT_AddKey(hItem,GUI_KEY_DELETE);
				EDIT_AddKey(hItem,input_char[index]);
				cursorpos=EDIT_GetCursorCharPos(hItem);
				if(cursorindex == 4) EDIT_SetSel(hItem,cursorpos,cursorpos);
				else EDIT_SetSel(hItem,cursorpos-1,cursorpos-1);
			}
		}
		hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_TUNNEL);
		if(WM_HasFocus(hItem))//改变无线通道
		{
			if(KeyLed_State.wheel<0)
			{
				tunnel_val=KeyLed_State.wheel+17;
			}
			else 
			{
				tunnel_val=KeyLed_State.wheel;
			}
			EDIT_SetValue(hItem,tunnel_val);
		}

		break;
	case MY_MESSAGE_DOWN://向右移动光标
		hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_CLIENT);
		if(WM_HasFocus(hItem))	
		{
			cursorpos=EDIT_GetCursorCharPos(hItem);
			if(cursorpos == 4)
			{
				EDIT_SetCursorAtChar(hItem,0);
				EDIT_SetSel(hItem,0,0);
				cursorindex=EDIT_GetCursorCharPos(hItem);
			}
			else
			{
				EDIT_SetCursorAtChar(hItem,cursorpos+1);
				EDIT_SetSel(hItem,cursorpos+1,cursorpos+1);
				cursorindex=EDIT_GetCursorCharPos(hItem);
			}
			
		}
		break;
  default:
    WM_DefaultProc(pMsg);
  }
}



/**
  * @brief  callback for Date Settings
  * @param  pMsg: Pointer to Date structure
  * @retval None
  */

static void _cbSystemSettings(WM_MESSAGE * pMsg) {
  WM_HWIN hItem;
  
  hItem = pMsg->hWin;
  uint8_t sel=0;
	WINDOW_SetBkColor(hItem, 0x00FFFFFF);
	int cursorpos=0;
	uint8_t NumChars=0;
	int index=0;
	//WT_Config_Read();//读取配置参数
	
  switch (pMsg->MsgId) {
    
  case WM_INIT_DIALOG:   
	  //亮度
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_LIGHT);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
		TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_SLIDER_LIGHT);
		SLIDER_SetRange(hItem, 0, 10);
		SLIDER_SetNumTicks(hItem, 11);
		SLIDER_SetValue(hItem,WT_Config.BackLight);
	  // Initialization of 'Light'
    //音量
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_AUDIO);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
		TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_SLIDER_AUDIO);
		SLIDER_SetRange(hItem, 0, 10);
		SLIDER_SetNumTicks(hItem, 11);
		SLIDER_SetValue(hItem,WT_Config.AudioVolume);
		GUI_SetColor(GUI_BLACK);
	
	  //声音OK
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_AUDIOOK);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
		TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_AUDIOOK);
		DROPDOWN_SetFont(hItem,&GUI_FontHZ_Song_12);
    DROPDOWN_AddString(hItem, "OK-1");
    DROPDOWN_AddString(hItem, "OK-2");
		DROPDOWN_AddString(hItem, "OK-3");
		DROPDOWN_AddString(hItem, "OK-4");

		DROPDOWN_SetSel(hItem,WT_Config.AudioOK);
		GUI_SetColor(GUI_BLACK);
		
		//声音NG
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_AUDIONG);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
		TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_AUDIONG);
		DROPDOWN_SetFont(hItem,&GUI_FontHZ_Song_12);
		DROPDOWN_AddString(hItem, "NG-1");
    DROPDOWN_AddString(hItem, "NG-2");
		DROPDOWN_AddString(hItem, "NG-3");
		DROPDOWN_AddString(hItem, "NG-4");
		if((WT_Config.AudioNG-4)>0)
		DROPDOWN_SetSel(hItem,WT_Config.AudioNG-4);
		else DROPDOWN_SetSel(hItem,0);
		GUI_SetColor(GUI_BLACK);
		
		//语言
	  hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_LANGUAGE);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
    TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
		hItem = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_LANG);
		DROPDOWN_SetFont(hItem,&GUI_FontHZ_Song_12);
    DROPDOWN_AddString(hItem, "中文");
    DROPDOWN_AddString(hItem, "英文");
		DROPDOWN_SetSel(hItem,WT_Config.Language);	
		
    break;
	case	MY_MESSAGE_WHEEL://处理滚轮事件
			hItem = WM_GetDialogItem(pMsg->hWin, ID_SLIDER_LIGHT);
			if(WM_HasFocus(hItem))//改变亮度
			{
				sel=SLIDER_GetValue(hItem);
				if(tmpwheel<KeyLed_State.wheel)
				{
					if(sel<10) 
					{
						SLIDER_Inc(hItem);
						LCD_BackLight_SetPWM(sel+1);
					}
					else
					{
						SLIDER_SetValue(hItem,10);
						LCD_BackLight_SetPWM(10);
					}
					tmpwheel=KeyLed_State.wheel;
				}
				else
				{
					if(sel>0) 
					{
						SLIDER_Dec(hItem);
						LCD_BackLight_SetPWM(sel-1);
					}
					else
					{
						SLIDER_SetValue(hItem,0);
						LCD_BackLight_SetPWM(0);
					}
					tmpwheel=KeyLed_State.wheel;
				}
			}
			//改变音量
			hItem = WM_GetDialogItem(pMsg->hWin, ID_SLIDER_AUDIO);
			if(WM_HasFocus(hItem))
			{
				sel=SLIDER_GetValue(hItem);
				if(tmpwheel<KeyLed_State.wheel)
				{
					if(sel<10) 
					{
						SLIDER_Inc(hItem);
						WT_Config.AudioVolume = sel+1;
						osMessagePut(UartAudioEvent, UartAudio_VOLUME_Event, 0);	//调节音量
					}
					else
					{
						SLIDER_SetValue(hItem,10);
						WT_Config.AudioVolume = 10;
						osMessagePut(UartAudioEvent, UartAudio_VOLUME_Event, 0);	//调节音量
					}
					tmpwheel=KeyLed_State.wheel;
				}
				else
				{
					if(sel>0) 
					{
						SLIDER_Dec(hItem);
						WT_Config.AudioVolume = sel - 1;
						osMessagePut(UartAudioEvent, UartAudio_VOLUME_Event, 0);	//调节音量
					}
					else
					{
						SLIDER_SetValue(hItem,0);
						WT_Config.AudioVolume = 0;
						osMessagePut(UartAudioEvent, UartAudio_VOLUME_Event, 0);	//调节音量
					}
					tmpwheel=KeyLed_State.wheel;
				}
			}
		break;
	case	MY_MESSAGE_DOWN://处理向下按钮事件
		hItem = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_LANG);
		if(WM_HasFocus(hItem))//选择语言
		{
			sel=DROPDOWN_GetSel(hItem);
			if(sel<1)
			{
				DROPDOWN_IncSel(hItem);
			}					
			else //sel>=1 
			{
				DROPDOWN_SetSel(hItem,0);		
			}						
		}
		hItem = WM_GetDialogItem(pMsg->hWin, ID_SLIDER_LIGHT);
		if(WM_HasFocus(hItem))//调节亮度
		{
			sel=SLIDER_GetValue(hItem);
			if(sel<10)
			{
				SLIDER_Inc(hItem);
				LCD_BackLight_SetPWM(sel+1);
			}					
			else //sel>=10 
			{
				SLIDER_SetValue(hItem,0);
				LCD_BackLight_SetPWM(0);
			}	
		}
		hItem = WM_GetDialogItem(pMsg->hWin, ID_SLIDER_AUDIO);
		if(WM_HasFocus(hItem))//调节音量
		{
			sel=SLIDER_GetValue(hItem);
			sel++;
			if(sel > 10) 
			{
				sel=0;
			}
			SLIDER_SetValue(hItem,sel);
			WT_Config.AudioVolume = sel;
			osMessagePut(UartAudioEvent, UartAudio_VOLUME_Event, 0);	//调节音量
		}
		hItem = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_AUDIOOK);
		if(WM_HasFocus(hItem))//选择OK声音文件
		{
			sel=DROPDOWN_GetSel(hItem);
			if(sel<3)
			{
				DROPDOWN_IncSel(hItem);
				WT_Config.AudioOK = DROPDOWN_GetSel(hItem);
				osMessagePut(UartAudioEvent, UartAudioOK_REPEAT_TX_Event, 0);	//播放声音
			}					
			else //sel>=1 
			{
				DROPDOWN_SetSel(hItem,0);		
				WT_Config.AudioOK = 0;
				osMessagePut(UartAudioEvent, UartAudioOK_REPEAT_TX_Event, 0);	//播放声音
			}						
		}
		hItem = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_AUDIONG);
		if(WM_HasFocus(hItem))//选择NG声音文件
		{
			sel=DROPDOWN_GetSel(hItem);
			if(sel<3)
			{
				DROPDOWN_IncSel(hItem);
				WT_Config.AudioNG = DROPDOWN_GetSel(hItem)+4;
				osMessagePut(UartAudioEvent, UartAudioNG_TX_Event, 0);	//播放声音
			}					
			else //sel>=1 
			{
				DROPDOWN_SetSel(hItem,0);		
				WT_Config.AudioNG = 4;
				osMessagePut(UartAudioEvent, UartAudioNG_TX_Event, 0);	//播放声音
			}						
		}
		
		break;
  default:
    WM_DefaultProc(pMsg);
  }
}

/**
  * @brief  callback for Date Settings
  * @param  pMsg: Pointer to Date structure
  * @retval None
  */

static void _cbTimeSettings(WM_MESSAGE * pMsg) {
  WM_HWIN hItem;
  //uint32_t year=0;
	int32_t tmp_val=0;
  hItem = pMsg->hWin;
	WINDOW_SetBkColor(hItem, 0x00FFFFFF);
	uint8_t sec,min, hour, day, month;
  uint16_t year;
	//WT_Config_Read();//读取配置参数
	get_systemtime(&sec,&min,&hour,&day,&month,&year);
	
  switch (pMsg->MsgId) {
    
  case WM_INIT_DIALOG:
  	//日期设置
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_DATE);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
    TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
	
    //Initialization of 'Edit-year'
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_YEAR);
		EDIT_SetDecMode(hItem, 2014, 1970,9999, 0, 0);
		EDIT_SetValue(hItem,year);
    //EDIT_SetText(hItem, "2014");
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_YEAR);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
    TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
    //Initialization of 'Edit-month'
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_MONTH);
		EDIT_SetDecMode(hItem, 1, 1,12, 0, 0);
		EDIT_SetValue(hItem,month);
    //EDIT_SetText(hItem, "1");
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_MONTH);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
    TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
    //Initialization of 'Edit-day'
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_DAY);
		EDIT_SetDecMode(hItem, 1, 1,31, 0, 0);
		EDIT_SetValue(hItem,day);

		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_DAY);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
    TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
		//时间设置
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_TIME);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
    TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
		//Initialization of 'Edit-hour'
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_HOUR);
		EDIT_SetDecMode(hItem, 12, 0,23, 0, 0);
		EDIT_SetValue(hItem,hour);
    //EDIT_SetText(hItem, "12");
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_HOUR);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
    TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
    //Initialization of 'Edit-minute'
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_MINUTE);
		EDIT_SetDecMode(hItem, 0, 0,59, 0, 0);
		EDIT_SetValue(hItem,min);
    //EDIT_SetText(hItem, "00");
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_MINUTE);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
    TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
    //Initialization of 'Edit-second'
    hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_SECOND);
		EDIT_SetDecMode(hItem, 0, 0,59, 0, 0);
		EDIT_SetValue(hItem,sec);
    //EDIT_SetText(hItem, "00");
		hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_SECOND);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
    TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
    break;
//	case WM_PAINT:
//		GUI_SetColor(GUI_BLACK);
//		GUI_SetPenSize(5);
//		GUI_DrawHLine(160,0,480);
	case	MY_MESSAGE_WHEEL://处理滚轮事件
		hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_YEAR);
		if(WM_HasFocus(hItem))//改变年
		{
			year=EDIT_GetValue(hItem);
			if(tmpwheel<KeyLed_State.wheel)
			{
				EDIT_SetValue(hItem,year+1);
				tmpwheel=KeyLed_State.wheel;
			}
			else
			{
				EDIT_SetValue(hItem,year-1);
				tmpwheel=KeyLed_State.wheel;
			}
		}
		hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_MONTH);
		if(WM_HasFocus(hItem))//改变月
		{
			tmp_val = EDIT_GetValue(hItem);
			if(tmpwheel<KeyLed_State.wheel)
			{
				tmp_val = tmp_val + 1;
				if(tmp_val >12) tmp_val = tmp_val - 12;
				EDIT_SetValue(hItem,tmp_val+1);
				tmpwheel=KeyLed_State.wheel;
			}
			else
			{
				tmp_val = tmp_val - 1;			
				if(tmp_val <= 0) tmp_val = tmp_val + 12;
				EDIT_SetValue(hItem,tmp_val);
				tmpwheel=KeyLed_State.wheel;
			}
			EDIT_SetValue(hItem,tmp_val);
			//EDIT_SetValue(hItem,KeyLed_State.wheel);	
		}
		hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_DAY);
		if(WM_HasFocus(hItem))//改变日
		{
			tmp_val = EDIT_GetValue(hItem);
			if(tmpwheel<KeyLed_State.wheel)
			{
				tmp_val = tmp_val + 1;
				if(tmp_val >31) tmp_val = tmp_val - 31;
				EDIT_SetValue(hItem,tmp_val+1);
				tmpwheel=KeyLed_State.wheel;
			}
			else
			{
				tmp_val = tmp_val - 1;			
				if(tmp_val <= 0) tmp_val = tmp_val + 31;
				EDIT_SetValue(hItem,tmp_val);
				tmpwheel=KeyLed_State.wheel;
			}
			EDIT_SetValue(hItem,tmp_val);
			//EDIT_SetValue(hItem,KeyLed_State.wheel);	
		}
		hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_HOUR);
		if(WM_HasFocus(hItem))//改变时
		{
			tmp_val = EDIT_GetValue(hItem);
			if(tmpwheel<KeyLed_State.wheel)
			{
				tmp_val = tmp_val + 1;
				if(tmp_val >23) tmp_val = tmp_val - 24;
				EDIT_SetValue(hItem,tmp_val);
				tmpwheel=KeyLed_State.wheel;
			}
			else
			{
				tmp_val = tmp_val - 1;			
				if(tmp_val < 0) tmp_val = tmp_val + 24;
				EDIT_SetValue(hItem,tmp_val);
				tmpwheel=KeyLed_State.wheel;
			}
			EDIT_SetValue(hItem,tmp_val);
			//EDIT_SetValue(hItem,KeyLed_State.wheel);	
		}
		hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_MINUTE);
		if(WM_HasFocus(hItem))//改变分
		{
			tmp_val = EDIT_GetValue(hItem);
			if(tmpwheel<KeyLed_State.wheel)
			{
				tmp_val = tmp_val + 1;
				if(tmp_val >59) tmp_val = tmp_val - 60;
				EDIT_SetValue(hItem,tmp_val);
				tmpwheel=KeyLed_State.wheel;
			}
			else
			{
				tmp_val = tmp_val - 1;			
				if(tmp_val < 0) tmp_val = tmp_val + 60;
				EDIT_SetValue(hItem,tmp_val);
				tmpwheel=KeyLed_State.wheel;
			}
			EDIT_SetValue(hItem,tmp_val);
			//EDIT_SetValue(hItem,KeyLed_State.wheel);	
		}
		hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_SECOND);
		if(WM_HasFocus(hItem))//改变秒
		{
			tmp_val = EDIT_GetValue(hItem);
			if(tmpwheel<KeyLed_State.wheel)
			{
				tmp_val = tmp_val + 1;
				if(tmp_val >59) tmp_val = tmp_val - 60;
				EDIT_SetValue(hItem,tmp_val);
				tmpwheel=KeyLed_State.wheel;
			}
			else
			{
				tmp_val = tmp_val - 1;			
				if(tmp_val < 0) tmp_val = tmp_val + 60;
				EDIT_SetValue(hItem,tmp_val);
				tmpwheel=KeyLed_State.wheel;
			}
			EDIT_SetValue(hItem,tmp_val);
			//EDIT_SetValue(hItem,KeyLed_State.wheel);	
		}
		break;
  default:
    WM_DefaultProc(pMsg);
  }
}

/**
  * @brief  callback for Date Settings
  * @param  pMsg: Pointer to Date structure
  * @retval None
  */

static void _cbAdvanceSettings(WM_MESSAGE * pMsg) {
  WM_HWIN hItem;
  uint8_t sel=0;
//	uint8_t board_num=0;
  hItem = pMsg->hWin;
	WINDOW_SetBkColor(hItem, 0x00FFFFFF);
	//WT_Config_Read();//读取配置参数
	
  switch (pMsg->MsgId) {
    
  case WM_INIT_DIALOG:
 		//测试模式
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_TESTMODE);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
    TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
		hItem = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_TESTMODE);
		DROPDOWN_SetFont(hItem,&GUI_FontHZ_Song_12);
    DROPDOWN_AddString(hItem, "自动");
    DROPDOWN_AddString(hItem, "手动");
		DROPDOWN_AddString(hItem, "定时");	
		DROPDOWN_SetSel(hItem,WT_Config.TestMode);	
		//
	  // 导通阈值
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_WTLIMIT);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
		TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_WTLIMIT);
		DROPDOWN_SetFont(hItem,&GUI_FontHZ_Song_12);
		DROPDOWN_AddString(hItem, "27Ω");
    DROPDOWN_AddString(hItem, "365Ω");
		DROPDOWN_SetSel(hItem,WT_Config.Mode_TestW);	//测试模式, 0:27R, 1:365R,
		//
	  // 自学习模式
    //
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_STUDYMODE);
    TEXT_SetTextAlign(hItem, GUI_TA_LEFT | GUI_TA_VCENTER);
		TEXT_SetFont(hItem,&GUI_FontHZ_Song_12);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_STUDYMODE);
		DROPDOWN_SetFont(hItem,&GUI_FontHZ_Song_12);
		DROPDOWN_AddString(hItem, "完整模式");
    DROPDOWN_AddString(hItem, "优化模式");
		DROPDOWN_SetSel(hItem,WT_Config.StudyOptimizingMode);	
		//密码
		hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_PASSWD);
    EDIT_SetText(hItem, (const char *)WT_Config.Passwd);
		
		//测试规则
		hItem = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_TESTRULE);
		DROPDOWN_SetFont(hItem,&GUI_FontHZ_Song_12);
    DROPDOWN_AddString(hItem, "循环检测");
    DROPDOWN_AddString(hItem, "单次检测");
		DROPDOWN_SetSel(hItem,WT_Config.StudyOptimizingMode);
		
    break;
	case	MY_MESSAGE_WHEEL://处理滚轮事件
		hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_PASSWD);
		if(WM_HasFocus(hItem))//改变字符值
		{
			EDIT_SetCursorAtChar(hItem,cursorindex);
			index=KeyLed_State.wheel;

			if(KeyLed_State.wheel>=65 && KeyLed_State.wheel <130) index=KeyLed_State.wheel-65;
			if(KeyLed_State.wheel>=130 && KeyLed_State.wheel <195) index=KeyLed_State.wheel-130;
			if(KeyLed_State.wheel>=195) index=64;
			if(KeyLed_State.wheel<0 && KeyLed_State.wheel >= -65) index=KeyLed_State.wheel+65;
			if(KeyLed_State.wheel<-65 && KeyLed_State.wheel >= -130) index=KeyLed_State.wheel+130;
			if(KeyLed_State.wheel<-130) index=0;
			if(cursorindex==EDIT_GetCursorCharPos(hItem))
			{
				EDIT_AddKey(hItem,GUI_KEY_DELETE);
				EDIT_AddKey(hItem,passwd_char[index]);
				cursorpos=EDIT_GetCursorCharPos(hItem);
				EDIT_SetSel(hItem,cursorpos-1,cursorpos-1);
			}	
		}
		break;
	case	MY_MESSAGE_DOWN://处理向下按钮事件
		hItem = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_TESTMODE);
		if(WM_HasFocus(hItem))//选择测试模式
		{
			sel=DROPDOWN_GetSel(hItem);
			if(sel<2)
			{
				DROPDOWN_IncSel(hItem);
			}					
			else //sel>=2 
			{
				DROPDOWN_SetSel(hItem,0);		
			}						
		}
		hItem = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_WTLIMIT);
		if(WM_HasFocus(hItem))//选择导通阈值
		{
			sel=DROPDOWN_GetSel(hItem);
			if(sel<1)
			{
				DROPDOWN_IncSel(hItem);
			}
			else //sel>=1 
			{
				DROPDOWN_SetSel(hItem,0);		
			}						
		}
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_DROPDOWN_STUDYMODE);
		if(WM_HasFocus(hItem))//选择自学习模式
		{
			sel=DROPDOWN_GetSel(hItem);
			if(sel<1)
			{
				DROPDOWN_IncSel(hItem);
			}
			else //sel>=2 
			{
				DROPDOWN_SetSel(hItem,0);		
			}				
		}
		hItem = WM_GetDialogItem(pMsg->hWin, ID_EDIT_PASSWD);
		if(WM_HasFocus(hItem))//移动光标
		{
			cursorpos=EDIT_GetCursorCharPos(hItem);
			NumChars = EDIT_GetNumChars(hItem);
			if(cursorpos <= (NumChars-1) )
			{
				EDIT_SetCursorAtChar(hItem,cursorpos+1);
				EDIT_SetSel(hItem,cursorpos+1,cursorpos+1);
				cursorindex=EDIT_GetCursorCharPos(hItem);
			}
			if(cursorpos == NumChars )
			{
				EDIT_SetCursorAtChar(hItem,0);
				EDIT_SetSel(hItem,0,0);
				cursorindex=EDIT_GetCursorCharPos(hItem);
			}
		}
		break;
  default:
    WM_DefaultProc(pMsg);
  }
}

/**
  * @brief  Callback routine of the dialog
  * @param  pMsg: pointer to data structure of type WM_MESSAGE
  * @retval None
  */

static void _cbDialog(WM_MESSAGE * pMsg) {
  WM_HWIN hItem;
  
  switch (pMsg->MsgId) {
  case WM_INIT_DIALOG:

    /* Initialization of 'System Information'  */
    hItem = pMsg->hWin;   
    WINDOW_SetBkColor(hItem, 0x00FFFFFF);
    hItem = WM_GetDialogItem(pMsg->hWin, ID_MULTIPAGE);
    
		MULTIPAGE_SetFont(hItem,&GUI_FontHZ_Song_16);
   /* Create and attache the MULTIPAGE dialog windows */
    hDialog_comm = GUI_CreateDialogBox(_aDialogCommunitSettings, 
                                  GUI_COUNTOF(_aDialogCommunitSettings), 
                                  &_cbCommunitSettings, WM_UNATTACHED, 0, 0);
    MULTIPAGE_AddPage(hItem, hDialog_comm, "通信设置");
	
		hDialog_time = GUI_CreateDialogBox(_aDialogTimeSettings, 
                                  GUI_COUNTOF(_aDialogTimeSettings), 
                                  &_cbTimeSettings, WM_UNATTACHED, 0, 0); 
    MULTIPAGE_AddPage(hItem, hDialog_time, "时间设置");
		
		hDialog_system = GUI_CreateDialogBox(_aDialogSystemSettings, 
                                  GUI_COUNTOF(_aDialogSystemSettings), 
                                  &_cbSystemSettings, WM_UNATTACHED, 0, 0); 
    MULTIPAGE_AddPage(hItem, hDialog_system, "系统设置");
		
		hDialog_advance = GUI_CreateDialogBox(_aDialogAdvanceSettings, 
                                  GUI_COUNTOF(_aDialogAdvanceSettings), 
                                  &_cbAdvanceSettings, WM_UNATTACHED, 0, 0); 
    MULTIPAGE_AddPage(hItem, hDialog_advance, "高级设置");
		
    MULTIPAGE_SelectPage(hItem, 0);  
		MULTIPAGE_SetBkColor(hItem, 0x00FFFFFF,MULTIPAGE_CI_ENABLED);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_OK);
		BUTTON_SetFont(hItem,&GUI_FontHZ_Song_12);
		BUTTON_SetSkinClassic(hItem);
		BUTTON_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		BUTTON_SetBkColor(hItem,BUTTON_CI_UNPRESSED, GUI_GREEN);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_DEFAULT);
		BUTTON_SetFont(hItem,&GUI_FontHZ_Song_12);
		BUTTON_SetSkinClassic(hItem);
		BUTTON_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		BUTTON_SetBkColor(hItem,BUTTON_CI_UNPRESSED, GUI_GREEN);
		
		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_EXIT);
		BUTTON_SetFont(hItem,&GUI_FontHZ_Song_12);
		BUTTON_SetSkinClassic(hItem);
		BUTTON_SetTextAlign(hItem, GUI_TA_HCENTER | GUI_TA_VCENTER);
		BUTTON_SetBkColor(hItem,BUTTON_CI_UNPRESSED, GUI_RED);

    break;
   
  default:
    WM_DefaultProc(pMsg);
    break;
  }
}

/*********************************************************************
*
*       Public code
*
**********************************************************************
*/
/*********************************************************************
*
*       CreateFramewin
*/
//WM_HWIN CreateSystemInfo(void);
//WM_HWIN CreateSystemInfo(void) {
static void Startup(WM_HWIN hWin, uint16_t xpos, uint16_t ypos)
{
  WM_HWIN hWindow;
	WM_HWIN hItem;
	WM_HWIN hItem_slider_light;
	WM_HWIN hItem_slider_audio;
	WM_HWIN hItem_audiook;
	WM_HWIN hItem_audiong;
	WM_HWIN hItem_Lang;
	WM_HWIN hItem_Testmode;
	WM_HWIN hItem_wtlimit;
	WM_HWIN hItem_studymode;
	WM_HWIN hDialog;
	
	WM_HWIN hItem_master;
	WM_HWIN hItem_client;
	WM_HWIN hItem_tunnel;
	WM_HWIN hParent;
	WM_MESSAGE Msg;
	
	WM_HWIN hItem_year;
	WM_HWIN hItem_month;
	WM_HWIN hItem_day;
	WM_HWIN hItem_hour;
	WM_HWIN hItem_min;
	WM_HWIN hItem_sec;
	
	WM_HWIN hItem_passwd;

	uint32_t i;
	uint32_t index=0;
	uint8_t buf8;
	//uint32_t focus;
	uint32_t wheel_stat=0;
	KeyLed_State.wheel=0;
	
	uint8_t sec,min,hour,day,month;
	uint16_t year;
	uint8_t res;
//	char mac[10];
	wt_SetText_Title("");
	wt_SetText_Menu(wt_setting.name);
	wt_SetText_Status("设置系统参数");
	
	WT_Config_Read();//读取配置参数
	
  hWindow = GUI_CreateDialogBox(_aDialog, GUI_COUNTOF(_aDialog), _cbDialog, hWin, xpos, ypos);
	hItem = WM_GetDialogItem(hWin, ID_MULTIPAGE);

	hItem_slider_light = WM_GetDialogItem(hWin,ID_SLIDER_LIGHT);
	hItem_slider_audio = WM_GetDialogItem(hWin,ID_SLIDER_AUDIO);
	hItem_Lang = WM_GetDialogItem(hWin,ID_DROPDOWN_LANG);
	hItem_Testmode = WM_GetDialogItem(hWin,ID_DROPDOWN_TESTMODE);
	hItem_wtlimit = WM_GetDialogItem(hWin,ID_DROPDOWN_WTLIMIT);
//	hItem_zlimit = WM_GetDialogItem(hWin,ID_DROPDOWN_ZLIMIT);
	hItem_studymode = WM_GetDialogItem(hWin,ID_DROPDOWN_STUDYMODE);
	//hItem_studyboard = WM_GetDialogItem(hWin,ID_EDIT_STUDYBOARD);
	
	hItem_master = WM_GetDialogItem(hWin,ID_EDIT_MASTER);
	hItem_client = WM_GetDialogItem(hWin,ID_EDIT_CLIENT);
	hItem_tunnel = WM_GetDialogItem(hWin,ID_EDIT_TUNNEL);
	hItem_audiook = WM_GetDialogItem(hWin,ID_DROPDOWN_AUDIOOK);
	hItem_audiong = WM_GetDialogItem(hWin,ID_DROPDOWN_AUDIONG);
	
	hItem_year = WM_GetDialogItem(hWin,ID_EDIT_YEAR);
	hItem_month = WM_GetDialogItem(hWin,ID_EDIT_MONTH);
	hItem_day = WM_GetDialogItem(hWin,ID_EDIT_DAY);
	hItem_hour = WM_GetDialogItem(hWin,ID_EDIT_HOUR);
	hItem_min = WM_GetDialogItem(hWin,ID_EDIT_MINUTE);
	hItem_sec = WM_GetDialogItem(hWin,ID_EDIT_SECOND);
	
	hItem_passwd = WM_GetDialogItem(hWin,ID_EDIT_PASSWD);
	goto normal_loop;
	passwd_auth:
	//创建密码输入对话框
		hDialog= Create_PasswdDlgWindow(hWindow);
		GUI_Exec();
		while (WM_IsWindow(hDialog))
		{
			if(BSP_GetKEY_State(KeyOK) == 1 )//wujun added 
			{
				while(BSP_GetKEY_State(KeyOK) == 1)
				{
					osDelay(10);
				}
				Msg.MsgId = MY_MESSAGE_OK;
				Msg.hWinSrc=hWindow;
				hItem=WM_GetFocussedWindow();
				hParent=WM_GetParent(hItem);
				WM_SendMessage(hParent,&Msg);
				buf8 = 0;
				
			}
			if(BSP_GetKEY_State(KeyCancle) == 1 ) 
			{
				while(BSP_GetKEY_State(KeyCancle) == 1)
				{
					osDelay(10);
				}
				Msg.MsgId = MY_MESSAGE_CANCEL;
				Msg.hWinSrc=hWindow;
				hItem=WM_GetFocussedWindow();
				hParent=WM_GetParent(hItem);
				WM_SendMessage(hParent,&Msg);	
				buf8 = 2;
			}
			if(BSP_GetKEY_State(KeyWheel) == 1 )//删除字符
			{
				while(BSP_GetKEY_State(KeyWheel) == 1)
				{
					osDelay(10);
				}
				Msg.MsgId = MY_MESSAGE_BUTTONDELETE;
				hItem=WM_GetFocussedWindow();
				hParent=hDialog;
				WM_SendMessage(hParent,&Msg);
			}
		
			if(BSP_GetKEY_State(KeyDown) == 1)
			{
				buf8 = 10;
				while(BSP_GetKEY_State(KeyDown) == 1)
				{
					osDelay(20);
					buf8--;
					if(buf8 == 0) break;
				}
				Msg.MsgId = MY_MESSAGE_DOWN;
				hItem=WM_GetFocussedWindow();
				hParent=WM_GetParent(hItem);
				WM_SendMessage(hParent,&Msg);
			}
			
			if(BSP_GetKEY_State(KeyUp) == 1)
			{
				buf8 = 10;
				while(BSP_GetKEY_State(KeyUp) == 1)
				{
					osDelay(20);
					buf8--;
					if(buf8 == 0) break;
				}
				Msg.MsgId = MY_MESSAGE_UP;
				WM_SendMessage(hDialog,&Msg);
			}
			if(KeyLed_State.wheel!=wheel_stat)//处理滚轮事件
			{
				Msg.MsgId = MY_MESSAGE_WHEEL;
				hItem=WM_GetFocussedWindow();
				hParent=WM_GetParent(hItem);
				WM_SendMessage(hParent,&Msg);
				wheel_stat=KeyLed_State.wheel;
			}
			GUI_Delay(20);
		 }
		// close config dialog
		if(buf8 != 0) 
		{
			// close dialog
			wheel_value=0;
			KeyLed_State.wheel=0;
			GUI_EndDialog(hWindow,0);
			GUI_Exec();
			//win_stat=0;	
			Number_Windos = 0;
			return;
		}
	
	normal_loop:
	while(1)
  {
		//key detect
		if(BSP_GetKEY_State(KeyDown) == 1)
		{
			while(BSP_GetKEY_State(KeyDown) == 1)
			{
				osDelay(10);
			}
			
			Msg.MsgId = MY_MESSAGE_DOWN;
			hItem=WM_GetFocussedWindow();
			hParent=WM_GetParent(hItem);
			WM_SendMessage(hParent,&Msg);
			
		}
		if(BSP_GetKEY_State(KeyUp) == 1)//改变输入焦点
		{
			while(BSP_GetKEY_State(KeyUp) == 1)
			{
				osDelay(10);
			}
			GUI_SendKeyMsg(GUI_KEY_TAB, 1);
			if(WM_HasFocus(hItem_audiook)) 
			{
				osMessagePut(UartAudioEvent, UartAudioOK_REPEAT_TX_Event, 0);	//播放OK声音
			}
			else if(WM_HasFocus(hItem_audiong)) 
			{
				osMessagePut(UartAudioEvent, UartAudioNG_TX_Event, 0);	//播放NG声音
			}
			else osMessagePut(UartAudioEvent, UartAudioSTOP_TX_Event, 0);	//关闭声音
			
			KeyLed_State.wheel=0;
			wheel_stat=0;
		}
		//保存配置
		if(BSP_GetKEY_State(KeyOK) == 1)
		{
			i=0;
			while(BSP_GetKEY_State(KeyOK) == 1)
			{
				i++;
				osDelay(100);
			}
			if(i < 50)	//短按保存，小于5秒
			{
				hItem=WM_GetFocussedWindow();
				hParent=WM_GetParent(hItem);
				if(hParent==hDialog_comm)//保存通信设置
				{
					WT_Config.Addr_Master = EDIT_GetValue(hItem_master);
					WT_Config.Addr_Client = EDIT_GetValue(hItem_client);
					WT_Config.Channel = EDIT_GetValue(hItem_tunnel);
				}
				else if(hParent==hDialog_advance)//保存高级设置
				{
					WT_Config.TestMode = DROPDOWN_GetSel(hItem_Testmode);
					WT_Config.Mode_TestW = DROPDOWN_GetSel(hItem_wtlimit);
					//WT_Config.Mode_TestZ = DROPDOWN_GetSel(hItem_zlimit);
					WT_Config.Mode_TestZ = WT_Config.Mode_TestW;
					WT_Config.StudyOptimizingMode = DROPDOWN_GetSel(hItem_studymode);
					//WT_Config.StudyBoardNumber = EDIT_GetValue(hItem_studyboard);
				}
				else if(hParent==hDialog_system)//保存系统设置
				{
					WT_Config.BackLight = SLIDER_GetValue(hItem_slider_light);
					WT_Config.AudioVolume = SLIDER_GetValue(hItem_slider_audio);
					WT_Config.AudioOK = DROPDOWN_GetSel(hItem_audiook);
					WT_Config.AudioNG = DROPDOWN_GetSel(hItem_audiong)+4;
					WT_Config.Language = DROPDOWN_GetSel(hItem_Lang);	
					//strcpy((char *)WT_Config.Passwd,EDIT_GetText(hItem_passwd));
					EDIT_GetText(hItem_passwd,(char *)WT_Config.Passwd,7);
				}
				else if(hParent==hDialog_time)//保存时间设置
				{
					sec=EDIT_GetValue(hItem_sec);
					min=EDIT_GetValue(hItem_min);
					hour=EDIT_GetValue(hItem_hour);
					day=EDIT_GetValue(hItem_day);
					month=EDIT_GetValue(hItem_month);
					year=EDIT_GetValue(hItem_year)-2014;
					WT_Config.InfoRTC[0]=sec;
					set_systemtime(sec,min,hour,day,month,year);
				}				
				res = WT_Config_Save();
				if(res == 0) //ok
				{
					wt_SetText_Status("保存参数成功");
				}
				else //error
				{
					wt_SetText_Status("保存参数失败");
				}
			}	
			else//长按恢复默认值
			{
				wt_SetText_Status("恢复默认设置");
				res=WT_Config_Restore();
				if(res==0)//0-ok, 1-error
				{
					 EDIT_SetValue(hItem_master,WT_Config.Addr_Master);
					 EDIT_SetValue(hItem_client,WT_Config.Addr_Client);
					 EDIT_SetValue(hItem_tunnel,WT_Config.Channel);
					 DROPDOWN_SetSel(hItem_Testmode,WT_Config.TestMode);
					 DROPDOWN_SetSel(hItem_wtlimit,WT_Config.Mode_TestW);
					 //DROPDOWN_SetSel(hItem_zlimit,WT_Config.Mode_TestZ);
					 DROPDOWN_SetSel(hItem_studymode,WT_Config.StudyOptimizingMode);
					 //EDIT_SetValue(hItem_studyboard,WT_Config.StudyBoardNumber);
					 SLIDER_SetValue(hItem_slider_light,WT_Config.BackLight);
					 SLIDER_SetValue(hItem_slider_audio,WT_Config.AudioVolume);
					 DROPDOWN_SetSel(hItem_Lang,WT_Config.Language);
					 DROPDOWN_SetSel(hItem_audiook,WT_Config.AudioOK);
					 DROPDOWN_SetSel(hItem_audiong,WT_Config.AudioNG-4);
					 EDIT_SetValue(hItem_sec,WT_Config.InfoRTC[5]);
					 EDIT_SetValue(hItem_min,WT_Config.InfoRTC[4]);
					 EDIT_SetValue(hItem_hour,WT_Config.InfoRTC[3]);
					 EDIT_SetValue(hItem_day,WT_Config.InfoRTC[2]);
					 EDIT_SetValue(hItem_month,WT_Config.InfoRTC[1]);
					 EDIT_SetValue(hItem_year,WT_Config.InfoRTC[0]+2000);
					 sec=EDIT_GetValue(hItem_sec);
					 min=EDIT_GetValue(hItem_min);
					 hour=EDIT_GetValue(hItem_hour);
					 day=EDIT_GetValue(hItem_day);
					 month=EDIT_GetValue(hItem_month);
					 year=EDIT_GetValue(hItem_year)-2014;
					 set_systemtime(sec,min,hour,day,month,year);
					 EDIT_SetText(hItem_passwd,(const char *)WT_Config.Passwd);
				}
			}				
		}
		if(BSP_GetKEY_State(KeyCancle) == 1)//关闭窗口
		{
			while(BSP_GetKEY_State(KeyCancle) == 1)
			{
				osDelay(10);
			}
			osMessagePut(UartAudioEvent, UartAudioSTOP_TX_Event, 0);	//关闭声音
			GUI_EndDialog(hWindow,0);
			KeyLed_State.wheel=0;
			wheel_value=0;
			Number_Windos = 0;
			return;
		}
		//切换标签
		if(BSP_GetKEY_State(KeyWheel) == 1)
		{
			while(BSP_GetKEY_State(KeyWheel) == 1)
			{
				osDelay(10);
			}
			hItem = WM_GetDialogItem(hWin, ID_MULTIPAGE);
			osMessagePut(UartAudioEvent, UartAudioSTOP_TX_Event, 0);	//关闭声音
			index++;			
			if(index==4)
			{
				index=0;
			}
			MULTIPAGE_SelectPage(hItem,index);
			
			hItem=WM_GetFocussedWindow();
			hParent=WM_GetParent(hItem);
			if(hParent==hDialog_system)//系统设置
			{
				goto passwd_auth;
			}
		}
		if(KeyLed_State.wheel!=wheel_stat)//处理滚轮事件
		{
			Msg.MsgId = MY_MESSAGE_WHEEL;
			hItem=WM_GetFocussedWindow();
			hParent=WM_GetParent(hItem);
			WM_SendMessage(hParent,&Msg);
			wheel_stat=KeyLed_State.wheel;
			GUI_Delay(100);
		}

		//delay
		osDelay(30); 
		GUI_Exec();
	}
}

//设置时间
void set_systemtime(uint8_t sec,uint8_t min, uint8_t hour, uint8_t day, uint8_t month,uint16_t year)
{
	RTC_TimeTypeDef   RTC_Time;
  RTC_DateTypeDef   RTC_DateStructure;
	
	//time 
  RTC_Time.Seconds = sec;
  RTC_Time.Minutes = min;
  RTC_Time.Hours = hour;
	k_SetTime(&RTC_Time);
	
	//date 
  RTC_DateStructure.Year = year;
  RTC_DateStructure.Month = month;
  RTC_DateStructure.Date = day;
	k_SetDate(&RTC_DateStructure);
}

//获取时间
static void get_systemtime(uint8_t *sec,uint8_t *min, uint8_t *hour, uint8_t *day, uint8_t *month,uint16_t *year)
{
	RTC_TimeTypeDef   RTC_Time;
  RTC_DateTypeDef   RTC_DateStructure;

	k_GetTime(&RTC_Time);
	*sec    =  RTC_Time.Seconds;
	*min    =  RTC_Time.Minutes;
	*hour   =  RTC_Time.Hours;

	k_GetDate(&RTC_DateStructure);
	*year =  RTC_DateStructure.Year + 2014;
	*month =  RTC_DateStructure.Month;
	*day =  RTC_DateStructure.Date;
}
// USER START (Optionally insert additional public code)
// USER END

/*************************** End of file ****************************/
